source('~/R/datasciencecoursera/rprog-031/Assignment3/rankall.R')
subset=rankall("heart attack", 20)
getwd()
list.files()
setwd("./datasciencecoursera/rprog-031/Assignment3")
subset=rankall("heart attack", 20)
library(dplyr)
library(plyr)
rm(dpylr)
subset=rankall("heart attack", 20)
View(subset)
source('~/R/datasciencecoursera/rprog-031/Assignment3/rankall.R')
subset=rankall("heart attack", 20)
View(subset)
source('~/R/datasciencecoursera/rprog-031/Assignment3/rankall.R')
source('~/R/datasciencecoursera/rprog-031/Assignment3/rankall.R')
source('~/R/datasciencecoursera/rprog-031/Assignment3/rankall.R')
source('~/R/datasciencecoursera/rprog-031/Assignment3/rankall.R')
source('~/R/datasciencecoursera/rprog-031/Assignment3/rankall.R')
source('~/R/datasciencecoursera/rprog-031/Assignment3/rankall.R')
subset=rankall("heart attack", 20)
source('~/R/datasciencecoursera/rprog-031/Assignment3/rankall.R')
subset=rankall("heart attack", 20)
?subset
source('~/R/datasciencecoursera/rprog-031/Assignment3/rankall.R')
source('~/R/datasciencecoursera/rprog-031/Assignment3/rankall.R')
source('~/R/datasciencecoursera/rprog-031/Assignment3/rankhospital.R')
?ddply
View(subset)
rank(subset$outcome_col, ties.method='min')
source('~/R/datasciencecoursera/rprog-031/Assignment3/rankall.R')
source('~/R/datasciencecoursera/rprog-031/Assignment3/rankall.R')
ddply(subset)
data = validate_all(outcome)
## Initialize variables
rankall_return = data.frame("hospital"=character(), "state"=character())
## Order data by outcome [3], then by hospital name [1]
data = data[ order(data[,2], data[,3], data[,1]), ]
data = data[ !(data$outcome_col=="Not Available"), ]
source('~/R/datasciencecoursera/rprog-031/Assignment3/rankall.R')
rankall("heart attack")
source('~/R/datasciencecoursera/rprog-031/Assignment3/rankall.R')
rankall("heart attack")
?transform
source('~/R/datasciencecoursera/rprog-031/Assignment3/rankall.R')
source('~/R/datasciencecoursera/rprog-031/Assignment3/rankall.R')
rankall("heart attack")
source('~/R/datasciencecoursera/rprog-031/Assignment3/rankall.R')
rankall("heart attack")
?mutate
source('~/R/datasciencecoursera/rprog-031/Assignment3/rankall.R')
rankall("heart attack")
source('~/R/datasciencecoursera/rprog-031/Assignment3/rankall.R')
rankall("heart attack")
data = mutate(full_data, Hospital.Name, State, Outcome=outcome_col)
full_data = read.csv("outcome-of-care-measures.csv", colClasses = "character")
data = mutate(full_data, Hospital.Name, State, Outcome=outcome_col)
outcome_col=11
data = mutate(full_data, Hospital.Name, State, Outcome=outcome_col)
View(data)
source('~/R/datasciencecoursera/rprog-031/Assignment3/rankall.R')
data = select(full_data, Hospital.Name, State, outcome_col)
View(data)
data = select(full_data, Hospital.Name, State, Outcome=outcome_col)
View(data)
rm(full_data)
data = transform( data, Outcome=as.numeric(Outcome) )
View(data)
source('~/R/datasciencecoursera/rprog-031/Assignment3/rankall.R')
source('~/R/datasciencecoursera/rprog-031/Assignment3/rankall.R')
rankall("heart attack")
full_data = read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Only select hostpital name, filter state by input, and input outcome
## Remove full data file - don't need it in memory anymore
## Remove hospitals with data "Not Available" in input outcome column
## Transform character outcome to numeric
sub_data = select(full_data, Hospital.Name, State, Outcome=outcome_col)
sub_data = transform( sub_data, Outcome=as.numeric(Outcome) )
View(sub_data)
data = data[ order(data[,2], data[,3], data[,1]), ]
data = data[ !(data$outcome_col=="Not Available"), ]
data = validate_all(outcome)
outcome="heart attack"
data = validate_all(outcome)
data = data[ order(data[,2], data[,3], data[,1]), ]
data = data[ !(data$outcome_col=="Not Available"), ]
View(data)
data = validate_all(outcome)
data = data[ order(data[,2], data[,3], data[,1]), ]
View(data)
data = data[ !(is.na(data$outcome_col)), ]
data = data[ !(data$outcome_col =="NA"), ]
View(data)
source('~/R/datasciencecoursera/rprog-031/Assignment3/rankall.R')
rankall("heart attack")
source('~/R/datasciencecoursera/rprog-031/Assignment3/rankall.R')
rankall("heart attack")
View(data)
data=rankall("heart attack")
View(data)
source('~/R/datasciencecoursera/rprog-031/Assignment3/rankall.R')
source('~/R/datasciencecoursera/rprog-031/Assignment3/rankall.R')
data=rankall("heart attack")
View(data)
?ddply
source('~/R/datasciencecoursera/rprog-031/Assignment3/rankall.R')
source('~/R/datasciencecoursera/rprog-031/Assignment3/rankall.R')
source('~/R/datasciencecoursera/rprog-031/Assignment3/rankall.R')
source('~/R/datasciencecoursera/rprog-031/Assignment3/rankall.R')
source('~/R/datasciencecoursera/rprog-031/Assignment3/rankall.R')
ddply(data, .variables=state, .fun=min_rank())
View(data)
ddply(data, .variables=State, .fun=min_rank())
ddply(data, .variables="State", .fun=min_rank())
ddply(data, .variables="State", .fun=min_rank(data, ties.method="min"))
ddply(data, .variables="State", .fun=min_rank(data))
ddply(data, .variables="State", .fun="min_rank(data)")
ddply(data, .variables="State", .fun="rank(data)")
ddply(data, .variables="State", .fun=rank(data))
ddply(data, .(State), rank)
ddply(data, .(State), count)
ddply(data, .(State), mutate, ranking=rank(data$State))
ddply(data, .(State), mutate, ranking=rank(data$Outcome))
ddply(data, .(State), mutate, ranking=rank(data))
ddply(data, .(State), mutate, ranking=rank())
ddply(data, .(State), mutate, ranking=rank(data$State))
ddply(data, .(State), mutate, ranking=rank(data$Outcome))
ddply(data, .(State), transform, ranking=rankOutcome, ties.method="first"))
ddply(data, .(State), transform, ranking=rankOutcome, ties.method="first")
ddply(data, .(State), transform, ranking=rank(Outcome, ties.method="first"))
temp=ddply(data, .(State), transform, ranking=rank(Outcome, ties.method="first"))
View(temp)
source('~/R/datasciencecoursera/rprog-031/Assignment3/rankall.R')
source('~/R/datasciencecoursera/rprog-031/Assignment3/rankall.R')
ddply(temp, .(State), count(ranking))
source('~/R/datasciencecoursera/rprog-031/Assignment3/rankall.R')
source('~/R/datasciencecoursera/rprog-031/Assignment3/rankall.R')
source('~/R/datasciencecoursera/rprog-031/Assignment3/rankall.R')
source('~/R/datasciencecoursera/rprog-031/Assignment3/rankall.R')
source('~/R/datasciencecoursera/rprog-031/Assignment3/rankall.R')
source('~/R/datasciencecoursera/rprog-031/Assignment3/rankall.R')
source('~/R/datasciencecoursera/rprog-031/Assignment3/rankall.R')
source('~/R/datasciencecoursera/rprog-031/Assignment3/rankall.R')
rankall("heart attack")
x=rankall("heart attack")
View(x)
source('~/R/datasciencecoursera/rprog-031/Assignment3/rankall.R')
source('~/R/datasciencecoursera/rprog-031/Assignment3/rankall.R')
x=rankall("heart attack")
View(x)
unique(x$state)
unique(x$state)[1]
source('~/R/datasciencecoursera/rprog-031/Assignment3/rankall.R')
source('~/R/datasciencecoursera/rprog-031/Assignment3/rankall.R')
x=rankall("heart attack")
source('~/R/datasciencecoursera/rprog-031/Assignment3/rankall.R')
source('~/R/datasciencecoursera/rprog-031/Assignment3/rankall.R')
source('~/R/datasciencecoursera/rprog-031/Assignment3/rankall.R')
rankall("heart attack", 3)
source('~/R/datasciencecoursera/rprog-031/Assignment3/rankall.R')
rankall("heart attack", 3)
data[,ranking==3]
data=rankall("heart attack", 3)
View(data)
sub_data=validate_all("heart attack")
View(sub_data)
data=sub_data
data = data[ order(data[,2], data[,3], data[,1]), ]
data = data[ !(is.na(data$outcome)), ]
data = ddply(data, .(state), transform, ranking=rank(outcome, ties.method="first"))
print(data)
View(data)
source('~/R/datasciencecoursera/rprog-031/Assignment3/rankall.R')
data=rankall("heart attack", 3)
View(data)
source('~/R/datasciencecoursera/rprog-031/Assignment3/rankall.R')
data=rankall("heart attack", 3)
?ddply
ddply(data, .(state), select(ranking==3))
ddply(data, .(state), summarize, ranking==3)
data$ranking
data
data=rankall("heart attack", 3)
View(data)
source('~/R/datasciencecoursera/rprog-031/Assignment3/rankall.R')
data=rankall("heart attack", 3)
View(data)
ddply(data, .(state), summarize, ranking==3)
num=3
ddply(data, .(state), summarize, ranking==num)
ddply(data, .(state), select(ranking==3))
data$ranking
ddply(data, .(state), select(data$ranking==3))
ddply(data, .(state), summarize, ranking==num)
temp=ddply(data, .(state), summarize, ranking==num)
View(temp)
names(temp)
temp=ddply(data, .(state), summarize, hospital, ranking==num)
View(temp)
temp=ddply(data, .(state), summarize, hospital=hospital, ranking==num)
View(temp)
temp=ddply(data, .(state), summarize, hospital=hospital, ranking=ranking==num)
View(temp)
temp=temp[!(ranking==FALSE),2:1]
temp=temp[!(temp$ranking==FALSE),2:1]
View(temp)
source('~/R/datasciencecoursera/rprog-031/Assignment3/rankall.R')
source('~/R/datasciencecoursera/rprog-031/Assignment3/rankall.R')
source('~/R/datasciencecoursera/rprog-031/Assignment3/rankall.R')
x=rankall("heart attack", 3)
View(x)
source('~/R/datasciencecoursera/rprog-031/Assignment3/rankall.R')
x=rankall("heart attack", 3)
View(x)
source('~/R/datasciencecoursera/rprog-031/Assignment3/rankall.R')
source('~/R/datasciencecoursera/rprog-031/Assignment3/rankall.R')
x=rankall("heart attack", 3)
source('~/R/datasciencecoursera/rprog-031/Assignment3/rankall.R')
x=rankall("heart attack", 3)
source('~/R/datasciencecoursera/rprog-031/Assignment3/rankall.R')
x=rankall("heart attack", 20)
View(x)
source('~/R/datasciencecoursera/rprog-031/Assignment3/rankall.R')
x=rankall("heart attack", 20)
View(x)
data = validate_all("heart attack")
## Order data by outcome [3], then by hospital name [1]; remove rows with NA outcome
data = data[ order(data[,2], data[,3], data[,1]), ]
data = data[ !(is.na(data$outcome)), ]
## Rank outcome when grouped by state - add rank column to data.frame
data = ddply(data, .(state), transform, ranking=rank(outcome, ties.method="first"))
View(data)
num=20
ddply(data, .(state), summarize, hospital=hospital, ranking=(ranking==num))
head(ddply(data, .(state), summarize, hospital=hospital, ranking=(ranking==num)))
x=ddply(data, .(state), summarize, hospital=hospital, ranking=(ranking==num))
View(x)
source('~/R/datasciencecoursera/rprog-031/Assignment3/rankall.R')
x=rankall("heart attack", 20)
View(x)
source('~/R/datasciencecoursera/rprog-031/Assignment3/rankall.R')
source('~/R/datasciencecoursera/rprog-031/Assignment3/rankall.R')
x=rankall("heart attack", 20)
source('~/R/datasciencecoursera/rprog-031/Assignment3/rankall.R')
x=rankall("heart attack", 20)
source('~/R/datasciencecoursera/rprog-031/Assignment3/rankall.R')
source('~/R/datasciencecoursera/rprog-031/Assignment3/rankall.R')
source('~/R/datasciencecoursera/rprog-031/Assignment3/rankall.R')
source('~/R/datasciencecoursera/rprog-031/Assignment3/rankall.R')
source('~/R/datasciencecoursera/rprog-031/Assignment3/rankall.R')
source('~/R/datasciencecoursera/rprog-031/Assignment3/rankall.R')
x=rankall("heart attack", 20)
length(data$state==3)
length(data$state==4)
data$state
length(data$state==4)
length(data$state=="WV")
data$state=="WV"
source('~/R/datasciencecoursera/rprog-031/Assignment3/rankall.R')
source('~/R/datasciencecoursera/rprog-031/Assignment3/rankall.R')
source('~/R/datasciencecoursera/rprog-031/Assignment3/rankall.R')
source('~/R/datasciencecoursera/rprog-031/Assignment3/rankall.R')
rankall = data.frame( hospital=character(), state=character() )
i = 1
## Validate input and get data of data for state and outcome
data = validate_all(outcome)
## Order data by outcome [3], then by hospital name [1]; remove rows with NA outcome
data = data[ order(data[,2], data[,3], data[,1]), ]
data = data[ !(is.na(data$outcome)), ]
## Rank outcome when grouped by state - add rank column to data.frame
data = ddply(data, .(state), transform, ranking=rank(outcome, ties.method="first"))
## Check for num-best per state, insert TRUE/FALSE if exists/does not exist
rankall = ddply(data, .(state), summarize, hospital=hospital, ranking=(ranking==num))
## Only return rows that have num-ranking for each state - order columns per requirements
rankall = rankall[ !(rankall$ranking==FALSE), 2:1 ]
View(rankall)
View(data)
missing = unique(data$state)[-rankall$state]
unique(data$state)
unique(data$state)[5]
rankall$state
setdiff(unique(data$state), rankall$state)
source('~/R/datasciencecoursera/rprog-031/Assignment3/rankall.R')
?rbind
source('~/R/datasciencecoursera/rprog-031/Assignment3/rankall.R')
names(hospital)
source('~/R/datasciencecoursera/rprog-031/Assignment3/rankall.R')
source('~/R/datasciencecoursera/rprog-031/Assignment3/rankall.R')
source('~/R/datasciencecoursera/rprog-031/Assignment3/rankall.R')
missing[,1] = setdiff(unique(data$state), rankall$state)
source('~/R/datasciencecoursera/rprog-031/Assignment3/rankall.R')
missing[1,] = setdiff(unique(data$state), rankall$state)
source('~/R/datasciencecoursera/rprog-031/Assignment3/rankall.R')
missing$state = setdiff(unique(data$state), rankall$state)
setdiff(unique(data$state), rankall$state)
rankall = data.frame( hospital=character(), state=character() )
missing = data.frame( hospital=character(), state=character() )
## Validate input and get data of data for state and outcome
data = validate_all(outcome)
## Order data by outcome [3], then by hospital name [1]; remove rows with NA outcome
data = data[ order(data[,2], data[,3], data[,1]), ]
data = data[ !(is.na(data$outcome)), ]
## Rank outcome when grouped by state - add rank column to data.frame
data = ddply(data, .(state), transform, ranking=rank(outcome, ties.method="first"))
## Check for num-best per state, insert TRUE/FALSE if exists/does not exist
rankall = ddply(data, .(state), summarize, hospital=hospital, ranking=(ranking==num))
## Only return rows that have num-ranking for each state - order columns per requirements
rankall = rankall[ !(rankall$ranking==FALSE), 2:1 ]
View(data)
View(rankall)
source('~/R/datasciencecoursera/rprog-031/Assignment3/rankall.R')
missing$state = setdiff(unique(data$state), rankall$state)
source('~/R/datasciencecoursera/rprog-031/Assignment3/rankall.R')
missing$state = cbind(missing, setdiff(unique(data$state), rankall$state))
source('~/R/datasciencecoursera/rprog-031/Assignment3/rankall.R')
missing = cbind(missing, setdiff(unique(data$state), rankall$state))
rm(missing)
missing = cbind(missing, setdiff(unique(data$state), rankall$state))
View(missing)
rm(missing)
missing = (setdiff(unique(data$state), rankall$state))
View(missing)
missing$state = (setdiff(unique(data$state), rankall$state))
missing[,1] = (setdiff(unique(data$state), rankall$state))
missing=matrix()
missing[,1] = (setdiff(unique(data$state), rankall$state))
rankall = rbind(rankall, (setdiff(unique(data$state), rankall$state)))
View(rankall)
rankall = rbind(rankall$state, (setdiff(unique(data$state), rankall$state)))
rankall = rbind(rankall, hospital="NA", state=(setdiff(unique(data$state), rankall$state)))
(rankall, )
?sapply
?tapply
?vapply
vapply(rankall, rbind, hospital="NA", state=(setdiff(unique(data$state), rankall$state))
vapply(rankall, rbind, hospital="NA", state=(setdiff(unique(data$state), rankall$state)))
vapply(rankall, rbind, c(hospital="NA", state=(setdiff(unique(data$state), rankall$state))))
source('~/R/datasciencecoursera/rprog-031/Assignment3/rankall.R')
missing = data.frame( hospital=character(), state=character() )
names(missing)
missing$state = setdiff(unique(data$state), rankall$state)
rankall$state
rankall = data.frame( hospital=character(), state=character() )
data = validate_all(outcome)
## Order data by outcome [3], then by hospital name [1]; remove rows with NA outcome
data = data[ order(data[,2], data[,3], data[,1]), ]
data = data[ !(is.na(data$outcome)), ]
data = ddply(data, .(state), transform, ranking=rank(outcome, ties.method="first"))
## Check for num-best per state, insert TRUE/FALSE if exists/does not exist
rankall = ddply(data, .(state), summarize, hospital=hospital, ranking=(ranking==num))
View(data)
View(rankall)
rankall = rankall[ !(rankall$ranking==FALSE), 2:1 ]
rankall$state
missing
names(missing)
rankall=rbind(rankall, )
View(rankall)
missing$state = setdiff(unique(data$state), rankall$state)
missing[,1] = setdiff(unique(data$state), rankall$state)
rm(missing)
missing=()
m[,1] = setdiff(unique(data$state), rankall$state)
missing = data.frame( hospital=character(), state=character() )
missing
missing[1]
missing[2]
missing[1] = c("OR", "TX")
missing[,state]=setdiff(unique(data$state), rankall$state)
state
missing$state
data$state
rankall$state
setdiff(unique(data$state), rankall$state)
missing[,state]=setdiff(unique(data$state), rankall$state)
missing[,missing$state]=setdiff(unique(data$state), rankall$state)
View(missing)
str(missing)
missing$state=setdiff(unique(data$state), rankall$state)
names(missing)
missing[,state]=setdiff(unique(data$state), rankall$state)
missing[,2]=setdiff(unique(data$state), rankall$state)
missing=rbind(missing, c(setdiff("NA", unique(data$state), rankall$state))
missing=rbind(missing, c(setdiff("NA", unique(data$state), rankall$state)))
missing=rbind(missing, c("NA", setdiff(unique(data$state), rankall$state))
missing=rbind(missing, c("NA", setdiff(unique(data$state), rankall$state)))
View(missing)
missing=ddply(missing, rbind, hospital="NA", state=setdiff(unique(data$state), rankall$state))
missing=ddply(missing, .function=rbind, hospital="NA", state=setdiff(unique(data$state), rankall$state))
missing=ddply(missing, .variables=state, .function=rbind, hospital="NA", state=setdiff(unique(data$state), rankall$state))
missing=ddply(missing, .variables="state", .function=rbind, hospital="NA", state=setdiff(unique(data$state), rankall$state))
missing=ddply(missing, .(state), .function=rbind, hospital="NA", state=setdiff(unique(data$state), rankall$state))
missing=ddply(missing, .(missing$state), .function=rbind, hospital="NA", state=setdiff(unique(data$state), rankall$state))
View(missing)
missing=cbind(setdiff(unique(data$state), rankall$state), "NA")
View(missing)
rankall=cbind(rankall, cbind(setdiff(unique(data$state), rankall$state), "NA"))
rankall=rbind(rankall, cbind(setdiff(unique(data$state), rankall$state), "NA"))
View(rankall)
View(missing)
missing=cbind("NA", setdiff(unique(data$state), rankall$state))
View(missing)
rankall=rbind(rankall, missing)
missing = data.frame( hospital=character(), state=character() )
View(missing)
missing=cbind("NA", setdiff(unique(data$state), rankall$state))
View(missing)
names(missing) = c("hospital", "state")
View(missing)
names(missing)
str(missing)
class(missing)
dim(missing)
missing$V1=hospital
missing$V1="hospital"
View(missing)
missing = data.frame( hospital=character(), state=character() )
View(missing)
missing=cbind(missing, c("NA", setdiff(unique(data$state), rankall$state)))
missing=cbind(c("NA", setdiff(unique(data$state), rankall$state)))
View(missing)
missing=cbind("NA", setdiff(unique(data$state), rankall$state))
View(missing)
missing$V1
missing[,1]
missing[,1]="hospital"
View(missing)
missing$state=cbind("NA", setdiff(unique(data$state), rankall$state))
View(missing)
missing = data.frame( hospital=character(), state=character() )
missing$state=setdiff(unique(data$state), rankall$state))
missing$state=setdiff(unique(data$state), rankall$state)
missing$state=cbind(setdiff(unique(data$state), rankall$state))
missing$state=cbind(missing,setdiff(unique(data$state), rankall$state))
missing$state=cbind(missing$state,setdiff(unique(data$state), rankall$state))
missing=cbind(missing$state,setdiff(unique(data$state), rankall$state))
View(missing)
missing=cbind(setdiff(unique(data$state), rankall$state))
View(missing)
missing=cbind("NA", setdiff(unique(data$state), rankall$state))
View(missing)
m=cbind("NA", setdiff(unique(data$state), rankall$state))
View(m)
missing = cbind(missing, setdiff(unique(data$state), rankall$state))
View(missing)
source('~/R/datasciencecoursera/rprog-031/Assignment3/rankall.R')
View(missing)
missing=matrix()
missing = cbind(missing, setdiff(unique(data$state), rankall$state))
missing = data.frame( hospital=character(), state=character() )
missing = cbind("NA", setdiff(unique(data$state), rankall$state))
View(missing)
rankall=rbind(rankall, missing)
names(rankall)
names(missing)
names(missing)=c("hospital", "state")
rankall=rbind(rankall, missing)
names(rankall)
names(missing)
class(rankall)
class(missing)
as.data.frame(missing)
source('~/R/datasciencecoursera/rprog-031/Assignment3/rankall.R')
missing=matrix()
missing = as.data.frame(cbind("NA", setdiff(unique(data$state), rankall$state)))
class(missing)
names(missing)
missing = data.frame( hospital=character(), state=character() )
missing = as.data.frame(cbind("NA", setdiff(unique(data$state), rankall$state)))
names(missing)
names(missing)=c("hospital", "state")
names(missing)
source('~/R/datasciencecoursera/rprog-031/Assignment3/rankall.R')
source('~/R/datasciencecoursera/rprog-031/Assignment3/rankall.R')
missing = as.data.frame(cbind("NA", setdiff(unique(data$state), rankall$state)))
missing=data.frame()
missing = as.data.frame(cbind("NA", setdiff(unique(data$state), rankall$state)))
rankall$state
x=rankall("heart attack", 3)
View(x)
source('~/R/datasciencecoursera/rprog-031/Assignment3/rankall.R')
source('~/R/datasciencecoursera/rprog-031/Assignment3/rankall.R')
rankall$state
outcome="heart attack"
rankall = data.frame( hospital=character(), state=character() )
missing = data.frame()
## Validate input and get data of data for state and outcome
data = validate_all(outcome)
## Order data by outcome [3], then by hospital name [1]; remove rows with NA outcome
data = data[ order(data[,2], data[,3], data[,1]), ]
data = data[ !(is.na(data$outcome)), ]
## Rank outcome when grouped by state - add rank column to data.frame
data = ddply(data, .(state), transform, ranking=rank(outcome, ties.method="first"))
## Check for num-best per state, insert TRUE/FALSE if exists/does not exist
rankall = ddply(data, .(state), summarize, hospital=hospital, ranking=(ranking==num))
## Only return rows that have num-ranking for each state - order columns per requirements
rankall = rankall[ !(rankall$ranking==FALSE), 2:1 ]
View(rankall)
View(data)
missing
rankall
missing = as.data.frame(cbind("NA", setdiff(unique(data$state), rankall$state)))
missing
class(missing)
names(missing)
names(missing) = c( "hospital", "state" )
names(missing)
rankall = rbind(rankall, missing)
rankall = sort(rankall, state)
source('~/R/datasciencecoursera/rprog-031/Assignment3/rankall.R')
source('~/R/datasciencecoursera/rprog-031/Assignment3/rankall.R')
source('~/R/datasciencecoursera/rprog-031/Assignment3/rankall.R')
